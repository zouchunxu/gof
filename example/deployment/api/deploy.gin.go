// Code generated by protoc-gen-gin. DO NOT EDIT.

package api

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	api_errors "github.com/zouchunxu/gof/pkg/api_errors"
	responses "github.com/zouchunxu/gof/pkg/responses"
	http "net/http"
	reflect "reflect"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(http.Request)
var _ = new(context.Context)
var _ = new(gin.Engine)
var _ = responses.New
var _ = api_errors.New
var _ = reflect.ValueOf

type DeployHandler interface {
	Create(context.Context, *DeployCreateReq) (*DeployCreateRsp, error)

	Delete(context.Context, *DeployDeleteReq) (*DeployDeleteRsp, error)

	List(context.Context, *DeployListReq) (*DeployListRsp, error)

	Update(context.Context, *DeployUpdateReq) (*DeployUpdateRsp, error)
}

func NewDeployHandler(srv DeployHandler, route *gin.Engine) {

	route.Handle("GET", "/deploy/list", func(c *gin.Context) {
		var in DeployListReq
		if "GET" == "GET" {
			if err := c.ShouldBindQuery(&in); err != nil {
				c.JSON(200, responses.New(500, nil, err.Error()))
				return
			}
		} else {
			if err := c.ShouldBindJSON(&in); err != nil {
				c.JSON(200, responses.New(500, nil, err.Error()))
				return
			}
		}

		ctx := context.Background()
		out, err := srv.List(ctx, &in)
		if err != nil {
			if apiError, ok := err.(*api_errors.ApiError); ok {
				c.JSON(200, responses.New(apiError.Code(), apiError.Data(), apiError.Message()))
				return
			}
			c.JSON(200, err.Error())
			return
		}
		c.JSON(200, responses.New(0, out, "ok"))
	})

	route.Handle("POST", "/deploy/create", func(c *gin.Context) {
		var in DeployCreateReq
		if "POST" == "GET" {
			if err := c.ShouldBindQuery(&in); err != nil {
				c.JSON(200, responses.New(500, nil, err.Error()))
				return
			}
		} else {
			if err := c.ShouldBindJSON(&in); err != nil {
				c.JSON(200, responses.New(500, nil, err.Error()))
				return
			}
		}

		ctx := context.Background()
		out, err := srv.Create(ctx, &in)
		if err != nil {
			if apiError, ok := err.(*api_errors.ApiError); ok {
				c.JSON(200, responses.New(apiError.Code(), apiError.Data(), apiError.Message()))
				return
			}
			c.JSON(200, err.Error())
			return
		}
		c.JSON(200, responses.New(0, out, "ok"))
	})

	route.Handle("POST", "/deploy/update", func(c *gin.Context) {
		var in DeployUpdateReq
		if "POST" == "GET" {
			if err := c.ShouldBindQuery(&in); err != nil {
				c.JSON(200, responses.New(500, nil, err.Error()))
				return
			}
		} else {
			if err := c.ShouldBindJSON(&in); err != nil {
				c.JSON(200, responses.New(500, nil, err.Error()))
				return
			}
		}

		ctx := context.Background()
		out, err := srv.Update(ctx, &in)
		if err != nil {
			if apiError, ok := err.(*api_errors.ApiError); ok {
				c.JSON(200, responses.New(apiError.Code(), apiError.Data(), apiError.Message()))
				return
			}
			c.JSON(200, err.Error())
			return
		}
		c.JSON(200, responses.New(0, out, "ok"))
	})

	route.Handle("POST", "/deploy/update", func(c *gin.Context) {
		var in DeployDeleteReq
		if "POST" == "GET" {
			if err := c.ShouldBindQuery(&in); err != nil {
				c.JSON(200, responses.New(500, nil, err.Error()))
				return
			}
		} else {
			if err := c.ShouldBindJSON(&in); err != nil {
				c.JSON(200, responses.New(500, nil, err.Error()))
				return
			}
		}

		ctx := context.Background()
		out, err := srv.Delete(ctx, &in)
		if err != nil {
			if apiError, ok := err.(*api_errors.ApiError); ok {
				c.JSON(200, responses.New(apiError.Code(), apiError.Data(), apiError.Message()))
				return
			}
			c.JSON(200, err.Error())
			return
		}
		c.JSON(200, responses.New(0, out, "ok"))
	})

}
